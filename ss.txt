const mainDisplay = document.getElementById("display");
const historyDisplay = document.getElementById("historyContent");

let memoryValue = 0; // مقدار ذخیره‌شده
let currentOperator = null; // عملگر فعلی
let isCalculated = false; // پرچم: آیا محاسبه انجام شده؟
let lastInput = ''; // آخرین ورودی

// افزودن عدد به نمایشگر
function appendNumber(input) {
    if (isCalculated) {
        isCalculated = false;
        mainDisplay.value = input; // شروع یک عدد جدید
    } else {
        if (mainDisplay.value === "0" || mainDisplay.value === "Error!" || mainDisplay.value === "Infinity") {
            mainDisplay.value = input; // تنظیم مقدار از صفر شروع می‌شود
        } else {
            // جلوگیری از اضافه شدن بیش از 11 رقم
            if (mainDisplay.value.replace('.', '').length < 11) { // ******* تغییر: اضافه کردن محدودیت 11 رقم
                mainDisplay.value += input;
            }
        }
    }
    lastInput = 'number';
}

// افزودن عملگر
function appendOperator(input) {
    const operators = ['+', '-', '*', '/', '^2', 'sqrt', 'cos'];

    if (lastInput === 'number') {
        if (input === 'sqrt') {
            mainDisplay.value = parseFloat(Math.sqrt(mainDisplay.value).toFixed(4));
            lastInput = 'number';
        } else if (input === 'cos') {
            const angle = mainDisplay.value;
            mainDisplay.value = parseFloat(Math.cos(angle * (Math.PI / 180)).toFixed(4));
            lastInput = 'number';
        } else if (input === 'pm') {
            mainDisplay.value = -mainDisplay.value;
            lastInput = 'number';
        } else if (input === '^2') {
            mainDisplay.value = Math.pow(mainDisplay.value, 2);
            lastInput = 'number';
        } else if (input === 'Backspace') {
            mainDisplay.value = mainDisplay.value.slice(0, -1);
        } else {
            // ذخیره عملگر و مقدار فعلی برای محاسبه
            if (currentOperator !== null) {  // اگر قبلاً عملگری وجود دارد، محاسبه کن
                calculate();  // ******* تغییر: اضافه کردن محاسبه در صورت وارد شدن عملگر جدید
            }
            memoryValue = parseFloat(mainDisplay.value); // ******* تغییر: ذخیره مقدار در حافظه
            currentOperator = input; // ******* تغییر: ذخیره عملگر
            historyDisplay.innerHTML += `${memoryValue} ${currentOperator} `; // ******* تغییر: نمایش تاریخچه به‌طور لحظه‌ای
            mainDisplay.value = ''; // ******* تغییر: پاک کردن نمایشگر برای وارد کردن عدد بعدی
            lastInput = 'operator';
        }
    } else if (lastInput === 'operator' && operators.includes(input)) {
        // به‌روزرسانی عملگر
        currentOperator = input; // ******* تغییر: به‌روزرسانی عملگر
        historyDisplay.innerHTML = historyDisplay.innerHTML.slice(0, -2); // ******* تغییر: حذف آخرین عملگر
        historyDisplay.innerHTML += `${currentOperator} `; // ******* تغییر: نمایش عملگر جدید
    }
}

// پاک کردن صفحه نمایش
function clearDisplay() {
    mainDisplay.value = '0';
    historyDisplay.innerHTML = '';
    memoryValue = 0;
    currentOperator = null;
    isCalculated = false;
    lastInput = 'number';
}

// انجام محاسبات
function calculate() {
    try {
        if (!currentOperator || lastInput === 'operator') return; // جلوگیری از محاسبه ناقص

        const currentValue = parseFloat(mainDisplay.value);
        let result;

        switch (currentOperator) {
            case '+':
                result = memoryValue + currentValue;
                break;
            case '-':
                result = memoryValue - currentValue;
                break;
            case '*':
                result = memoryValue * currentValue;
                break;
            case '/':
                if (currentValue === 0) throw new Error("Division by zero");
                result = memoryValue / currentValue;
                break;
            default:
                throw new Error("Invalid operator");
        }

        // نمایش تاریخچه
        historyDisplay.innerHTML += `${currentValue} = ${result} <br>`; // ******* تغییر: نمایش عملیات نهایی در تاریخچه
        mainDisplay.value = result.toFixed(4); // نمایش نتیجه در صفحه اصلی
        memoryValue = result; // به‌روزرسانی مقدار ذخیره‌شده
        currentOperator = null; // ریست عملگر
        isCalculated = true; // تنظیم پرچم محاسبه
    } catch (error) {
        mainDisplay.value = "Error!";
        historyDisplay.innerHTML = '';
        memoryValue = 0;
        currentOperator = null;
    }
}

// در نظر گرفتن ورودی کیبورد
document.addEventListener('keydown', function (event) {
    event.preventDefault();
    if (!isNaN(event.key)) {
        appendNumber(event.key);
    } else if (['+', '-', '*', '/'].includes(event.key)) {
        appendOperator(event.key);
    } else if (event.key === 'Enter') {
        calculate();
    } else if (event.key === 'Backspace') {
        appendOperator('Backspace');
    } else if (event.key.toLowerCase() === 'c') {
        clearDisplay();
    }
});
**************************
const mainDisplay = document.getElementById("display");
const historyDisplay = document.getElementById("historyContent");
var isCalculated = false;
var lastInput = '';
let expression = ""; // متغیر جدید برای ذخیره عبارت

class Stack {
    constructor() {
        this.items = [];
    }

    push(element) {
        this.items.push(element);
    }

    pop() {
        if (this.isEmpty()) {
            throw new Error("Stack is empty");
        }
        return this.items.pop();
    }

    peek() {
        if (this.isEmpty()) {
            throw new Error("Stack is empty");
        }
        return this.items[this.items.length - 1];
    }

    isEmpty() {
        return this.items.length === 0;
    }

    size() {
        return this.items.length;
    }
}

function appendNumber(input) {
    // اگر محاسبه شده باشد، نمایشگر را با عدد جدید پر کنید
    if (isCalculated) {
        isCalculated = false;
        mainDisplay.value = input; // مقدار جدید را نمایش دهید
        expression = input; // شروع یک عبارت جدید
    } else {
        // اگر آخرین ورودی یک اپراتور باشد، نمایشگر را با عدد جدید پر کنید
        if (lastInput === 'operator') {
            mainDisplay.value = input; // عدد جدید را نمایش دهید
            expression += input; // اضافه کردن عدد به عبارت
        } else {
            // مدیریت ورودی نقطه اعشاری
            if (input === '.' && mainDisplay.value.includes('.')) {
                return; // اگر نقطه قبلاً وجود دارد، هیچ کاری نکنید
            }

            // اگر نمایشگر 0 است یا خطا وجود دارد، مقدار جدید را نمایش دهید
            if (mainDisplay.value === '0' || mainDisplay.value === "Error!" || mainDisplay.value === "Infinity") {
                mainDisplay.value = input;
                expression = input; // شروع یک عبارت جدید
            } else {
                // اضافه کردن عدد به نمایشگر و عبارت
                if (mainDisplay.value.replace('.', '').length < 11) { 
                    mainDisplay.value += input;
                    expression += input; // اضافه کردن عدد به عبارت
                }
            }
        }
        lastInput = 'number'; // آخرین ورودی را به عنوان عدد ثبت کنید
    }
}

function appendOperator(input) {
    const operators = ['+', '-', '*', '/', '^2', 'sqrt', 'cos'];
    if (lastInput === 'number') {
        expression += input; // اضافه کردن اپراتور به عبارت
        lastInput = 'operator'; // آخرین ورودی را به عنوان اپراتور ثبت کنید
    } else if (lastInput === 'operator') {
        if (operators.includes(input)) {
            expression = expression.slice(0, -1) + input; // جایگزینی اپراتور قبلی با جدید
        }
    }
}

function clearDisplay() {
    mainDisplay.value = '0';
    historyDisplay.innerHTML = '';
    expression = ""; // پاک کردن عبارت
    lastInput = 'number'; // آخرین ورودی را به عنوان عدد ثبت کنید
}

function calculate() {
    try {
        const result = _compute(expression); // استفاده از عبارت برای محاسبه
        historyDisplay.innerHTML += `${expression} = ${result}<br>`; // نمایش تاریخچه محاسبات
        mainDisplay.value = result; // نمایش نتیجه نهایی
    } catch (error) {
        if (error.message === "Division by zero") {
            mainDisplay.value = "infinity!";
        } else {
            mainDisplay.value = "Error";
        }
    } finally {
        isCalculated = true; // نشان دادن اینکه محاسبه انجام شده است
        lastInput = 'number'; // آخرین ورودی را به عنوان عدد ثبت کنید
    }
}

function _compute(expression) {
    expression = expression.replace(/\s+/g, ''); // حذف فاصله‌ها

    const _numbers = new Stack();
    const _operators = new Stack();

    const precedence = { '+': 1, '-': 1, '*': 2, '/': 2 };  // اولویت بندی عملگرها

    // جدا کردن توکن‌ها
    const _tokens = expression.match(/\d+(\.\d+)?|[+\-*/()]/g);  // \d+  عدد یک یا چند رقمی و مشکل اعشار

    for (let i = 0; i < _tokens.length; i++) {
        let token = _tokens[i];

        if (!isNaN(token)) { 
            _numbers.push(parseFloat(token)); 
        } else if (token === '-' && (i === 0 || _tokens[i - 1] === '(' || isNaN(_tokens[i - 1]))) { 
            _tokens[i + 1] = '-' + _tokens[i + 1]; 
        } else { 
            while (!_operators.isEmpty() && precedence[_operators.peek()] >= precedence[token]) { 
                const operator = _operators.pop(); 
                const right = _numbers.pop(); 
                const left = _numbers.pop(); 
                _numbers.push(_applyOperator(left, right, operator)); 
            } 
            _operators.push(token); 
        } 
    }

    while (!_operators.isEmpty()) { 
        const operator = _operators.pop(); 
        const right = _numbers.pop(); 
        const left = _numbers.pop(); 
        _numbers.push(_applyOperator(left, right, operator)); 
    }

    return parseFloat(_numbers.peek().toFixed(4)); // نتیجه نهایی با دقت 4 رقم اعشار 
}

function _applyOperator(left, right, operator) { 
    switch (operator) { 
        case '+': return left + right; 
        case '-': return left - right; 
        case '*': return left * right; 
        case '/': if (right === 0) throw new Error("Division by zero"); return left / right; 
        default: throw new Error("Invalid operator"); 
    } 
}

// مدیریت ورودی کلیدها
document.addEventListener('keydown', function(event) { 
    event.preventDefault(); 

    if (!isNaN(event.key)) { 
        appendNumber(event.key); 
    } else if (['+', '-', '*', '/'].includes(event.key)) { 
        appendOperator(event.key); 
    } else if (event.key === 'Enter') { 
        calculate(); 
    } else if (event.key === '.') { 
        appendNumber(event.key); 
    } else if (event.key === 'Backspace') { 
         appendOperator('Backspace');  
     }  
});











*********************
اصلی


const mainDisplay = document.getElementById("display");
const historyDisplay = document.getElementById("historyContent");
var isCalculated = false;
var lastInput = '';

class Stack {
    constructor() {
        this.items = [];
    }

    push(element) {
        this.items.push(element);
    }

    pop() {
        if (this.isEmpty()) {
            throw new Error("Stack is empty");
        }
        return this.items.pop();
    }

    peek() {
        if (this.isEmpty()) {
            throw new Error("Stack is empty");
        }
        return this.items[this.items.length - 1];
    }

    isEmpty() {
        return this.items.length === 0;
    }

    size() {
        return this.items.length;
    }
}

function appendNumber(input) {
    if (isCalculated) {
        isCalculated = false;
        mainDisplay.value = input;
    } else {
        if (mainDisplay.value === '0' || mainDisplay.value === "Error!" || mainDisplay.value === "Infinity") {
            mainDisplay.value = input;
        } else {
            if (mainDisplay.value.replace('.', '').length < 11) { 
                mainDisplay.value += input;
            }
        }
        lastInput = 'number';
    }
}


function appendOperator(input) {
    const operators = ['+', '-', '*', '/', '^2', 'sqrt', 'cos'];
    if (lastInput === 'number') {
        if (input === 'sqrt') {
            mainDisplay.value = parseFloat(Math.sqrt(mainDisplay.value).toFixed(4));
            lastInput = 'number';
        } else if (input === 'cos') {
            const angle = mainDisplay.value;
            mainDisplay.value = parseFloat(Math.cos(angle * (Math.PI / 180)).toFixed(4));
            lastInput = 'number';
        } else if (input === 'pm') {
            mainDisplay.value = -mainDisplay.value;
            lastInput = 'number';
        } else if (input === '^2') {
            mainDisplay.value = Math.pow(mainDisplay.value, 2);
            lastInput = 'number';
        } else if (input === 'Backspace') {
            mainDisplay.value = mainDisplay.value.slice(0, -1);
        } else {
            mainDisplay.value += input;
            lastInput = 'operator';
        }
    } else if (lastInput === 'operator') {
        if (operators.includes(input)) {
            mainDisplay.value = mainDisplay.value.slice(0, -1) + input;
        } else if (input === 'Backspace') {
            mainDisplay.value = mainDisplay.value.slice(0, -1);
            lastInput = 'number';
        }
    }
}

function clearDisplay() {
    mainDisplay.value = '0';
    historyDisplay.innerHTML = '';
    lastInput = 'number';
}

function calculate() {
    try {
        const result = _compute(mainDisplay.value);
        historyDisplay.innerHTML = `${mainDisplay.value} = ${result}`;
        mainDisplay.value = result;
    } catch (error) {
        if (error.message === "Division by zero") {
            mainDisplay.value = "infinity!";
        } else {
            mainDisplay.value = "Error";
        }
    } finally {
        isCalculated = true;
        lastInput = 'number';
    }
}

function _compute(expression) {
    expression = expression.replace(/\s+/g, ''); // حذف فاصله‌ها

    const _numbers = new Stack();
    const _operators = new Stack();

    const precedence = { '+': 1, '-': 1, '*': 2, '/': 2 };  // اولویت بندی عملگرها

    // جدا کردن توکن‌ها
    const _tokens = expression.match(/\d+(\.\d+)?|[+\-*/()]/g);  // \d+  عدد یک یا چند رقمی و مشکل اعشار

    for (let i = 0; i < _tokens.length; i++) {
        let token = _tokens[i];

        if (!isNaN(token)) {
            _numbers.push(parseFloat(token));
        } else if (token === '-' && (i === 0 || _tokens[i - 1] === '(' || isNaN(_tokens[i - 1]))) {
            // اگر توکن علامت منفی و قبل از آن یک عملگر یا پرانتز باز است
            // به‌جای اپراتور، آن را به عنوان یک عدد منفی در نظر بگیریم
            _tokens[i + 1] = '-' + _tokens[i + 1];
        } else {
            while (!_operators.isEmpty() && precedence[_operators.peek()] >= precedence[token]) {
                const operator = _operators.pop();
                const right = _numbers.pop();
                const left = _numbers.pop();
                _numbers.push(_applyOperator(left, right, operator));
            }
            _operators.push(token);
        }
    }

    while (!_operators.isEmpty()) {
        const operator = _operators.pop();
        const right = _numbers.pop();
        const left = _numbers.pop();
        _numbers.push(_applyOperator(left, right, operator));
    }

    return parseFloat(_numbers.peek().toFixed(4)); // نتیجه نهایی با دقت 4 رقم اعشار
}

function _applyOperator(left, right, operator) {
    switch (operator) {
        case '+':
            return left + right;
        case '-':
            return left - right;
        case '*':
            return left * right;
        case '/':
            if (right === 0) throw new Error("Division by zero");
            return left / right;
        default:
            throw new Error("Invalid operator");
    }
}

document.addEventListener('keydown', function (event) {
    event.preventDefault(); // جلوگیری از رفتار پیش‌فرض*****
    if (!isNaN(event.key)) {
        appendNumber(event.key);
    } else if (['+', '-', '*', '/', '.'].includes(event.key)) {
        appendOperator(event.key);
    } else if (event.key === 'Enter') {
        calculate();
    } else if (event.key === 'Backspace') {
        appendOperator('Backspace');
    }
});







